# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure(2) do |config|
    config.vm.box = "ubuntu/jammy64"
  
    config.vm.provider "virtualbox" do |v|
      v.memory = 2048
      v.cpus = 2
    end
  
    config.vm.define "systemd" do |nfss|
      nfss.vm.hostname = "systemd"

      nfss.vm.provision 'shell', inline: <<-SHELL
        LBLUE='\033[1;34m'
        YELLOW='\033[1;33m'
        echo ${LBLUE}==============================================================
        echo ${LBLUE}Создание сервиса, который раз в 30 секунд мониторить лог файл
        echo ${LBLUE}на предмет наличия ключевого слова ALERT
        echo ${LBLUE}==============================================================
        echo ${YELLOW}Создание конфигурационного файла сервиса watchlog
        bash -c 'cat >> /etc/default/watchlog << EOF
# Configuration file for my watchlog service
# Place it to /etc/default
# File and word in that file that we will be monit
WORD="ALERT"
LOG=/var/log/watchlog.log
'EOF

        echo ${YELLOW}"****************************************"
        echo ${YELLOW}"Создание лог файла /var/log/watchlog.log"
        echo ${YELLOW}с тестовым содержимым:
        echo This is test message with ALERT word.
        echo ${YELLOW}"****************************************"
        bash -c 'cat >> /var/log/watchlog.log << EOF
This is test message with ALERT word.
'EOF

        echo ${YELLOW}"****************************************"
        echo ${YELLOW}Создание скрипта watchlog.sh
        echo ${YELLOW}для записи информации в системный лог syslog
        echo ${YELLOW}"****************************************"
        bash -c 'cat >> /opt/watchlog.sh << EOF
#!/bin/bash
WORD=\\$1
LOG=\\$2
DATE=\\`date\\`
if grep \\$WORD \\$LOG &> /dev/null
then
logger "\\$DATE: I found word, Master!"
else
exit 0
fi
'EOF
        chmod +x /opt/watchlog.sh
        
        echo ${YELLOW}"****************************************"
        echo ${YELLOW}Создание юнита для сервиса watchlog
        echo ${YELLOW}"****************************************"
        bash -c 'cat >> /etc/systemd/system/watchlog.service << EOF
[Unit]
Description=My watchlog service

[Service]
Type=oneshot
EnvironmentFile=/etc/default/watchlog
ExecStart=/opt/watchlog.sh \\$WORD \\$LOG
'EOF
        
        echo ${YELLOW}"****************************************"
        echo ${YELLOW}Создание таймера для юнита watchlog
        echo ${YELLOW}"****************************************"
        bash -c 'cat >> /etc/systemd/system/watchlog.timer << EOF
[Unit]
Description=Run watchlog script every 30 second

[Timer]
# Run every 30 second
OnActiveSec=10
OnUnitActiveSec=30
Unit=watchlog.service

[Install]
WantedBy=multi-user.target
'EOF

        echo ${YELLOW}"****************************************"
        echo ${YELLOW}Запуск созданного таймера watchlog
        echo ${YELLOW}"****************************************"
        systemctl enable watchlog.timer
        systemctl start watchlog.timer
        systemctl list-units |grep -E "(UNIT|watchlog)"
        echo
        systemctl list-timers |grep -E "(PASSED|watchlog)"

        echo ${YELLOW}"****************************************"
        echo ${YELLOW}Проверка наличия записи в syslog
        echo ${YELLOW}"****************************************"
        sleep 40s
        systemctl status watchlog
        echo
        echo
        tail -n 1000 /var/log/syslog | grep word
        echo ${YELLOW}"Пауза 1 минута перед продолжением процесса"
        sleep 60s

        echo ${LBLUE}==============================================================
        echo ${LBLUE}Установка spawn-fcgi и создание unit-файла
        echo ${LBLUE}==============================================================
        echo ${YELLOW}"****************************************"
        echo ${YELLOW}Установка spawn-fcgi и дополнительных пакетов
        echo ${YELLOW}"****************************************"
        add-apt-repository -y universe multiverse
        apt install -y spawn-fcgi php php-cgi php-cli apache2 libapache2-mod-fcgid

        echo ${YELLOW}"****************************************"
        echo ${YELLOW}Создание конфигурационного файла fcgi.conf
        echo ${YELLOW}"****************************************"
        mkdir -p /etc/spawn-fcgi
        bash -c 'cat >> /etc/spawn-fcgi/fcgi.conf << EOF
# You must set some working options before the "spawn-fcgi" service
will work.
# If SOCKET points to a file, then this file is cleaned up by the
init script.
#
# See spawn-fcgi(1) for all possible options.
#
# Example :
SOCKET=/var/run/php-fcgi.sock
OPTIONS="-u www-data -g www-data -s \\$SOCKET -S -M 0600 -C 32 -F 1 --
/usr/bin/php-cgi"
'EOF

        echo ${YELLOW}"****************************************"
        echo ${YELLOW}Создание unit-файла spawn-fcgi
        echo ${YELLOW}"****************************************"
        bash -c 'cat >> /etc/systemd/system/spawn-fcgi.service << EOF
[Unit]
Description=Spawn-fcgi startup service by Otus
After=network.target

[Service]
Type=simple
PIDFile=/var/run/spawn-fcgi.pid
EnvironmentFile=/etc/spawn-fcgi/fcgi.conf
ExecStart=/usr/bin/spawn-fcgi -n \\$OPTIONS
KillMode=process

[Install]
WantedBy=multi-user.target
'EOF

        echo ${YELLOW}"****************************************"
        echo ${YELLOW}Запуск и проверка сервиса spawn-fcgi
        echo ${YELLOW}"****************************************"
        systemctl enable spawn-fcgi
        systemctl start spawn-fcgi
        systemctl status spawn-fcgi
        echo ${YELLOW}"Пауза 1 минута перед продолжением процесса"
        sleep 60s

        echo ${LBLUE}==============================================================
        echo ${LBLUE}Изменение unit-файла Nginx для запуска нескольких инстансов
        echo ${LBLUE}сервера с разными конфигурационными файлами одновременно
        echo ${LBLUE}==============================================================
        echo ${YELLOW}"****************************************"
        echo ${YELLOW}Установка Nginx
        echo ${YELLOW}"****************************************"
        apt install -y nginx

        echo ${YELLOW}"****************************************"
        echo ${YELLOW}Создание unit-файла для работы с шаблонами
        echo ${YELLOW}"****************************************"
        bash -c cat <<EOF > /etc/systemd/system/nginx\\@.service
# Stop dance for nginx
# =======================
#
# ExecStop sends SIGSTOP (graceful stop) to the nginx process.
# If, after 5s (--retry QUIT/5) nginx is still running, systemd takes control
# and sends SIGTERM (fast shutdown) to the main process.
# After another 5s (TimeoutStopSec=5), and if nginx is alive, systemd sends
# SIGKILL to all the remaining processes in the process group (KillMode=mixed).
#
# nginx signals reference doc:
# http://nginx.org/en/docs/control.html
#
[Unit]
Description=A high performance web server and a reverse proxy server
Documentation=man:nginx(8)
After=network.target nss-lookup.target

[Service]
Type=forking
PIDFile=/run/nginx-%I.pid
ExecStartPre=/usr/sbin/nginx -t -c /etc/nginx/nginx-%I.conf -q -g 'daemon on; master_process on;'
ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx-%I.conf -g 'daemon on; master_process on;'
ExecReload=/usr/sbin/nginx -c /etc/nginx/nginx-%I.conf -g 'daemonon; master_process on;' -s reload
ExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx-%I.pid
TimeoutStopSec=5
KillMode=mixed

[Install]
WantedBy=multi-user.target
EOF

        echo ${YELLOW}"****************************************"
        echo ${YELLOW}Создание конфигурационных файлов nginx
        echo ${YELLOW}"****************************************"
        cp -p /etc/nginx/nginx.conf /etc/nginx/nginx-first.conf
        sed -i 's/pid \\/run\\/nginx.pid;/pid \\/run\\/nginx-first.pid;/' /etc/nginx/nginx-first.conf
        sed -i 's/include \\/etc\\/nginx\\/sites-enabled\\/\\*;/\\#include \\/etc\\/nginx\\/sites-enabled\\/\\*;/' /etc/nginx/nginx-first.conf
        sed -i '/server {/d' /etc/nginx/nginx-first.conf
        sed -i '/http {/ a server {' /etc/nginx/nginx-first.conf
        sed -i '/server {/ a listen 9001;' /etc/nginx/nginx-first.conf
        sed -i '/listen 9001/ a }' /etc/nginx/nginx-first.conf
        cp -p /etc/nginx/nginx-first.conf /etc/nginx/nginx-second.conf
        sed -i 's/pid \\/run\\/nginx-first.pid;/pid \\/run\\/nginx-second.pid;/' /etc/nginx/nginx-second.conf
        sed -i 's/listen 9001/listen 9002/' /etc/nginx/nginx-second.conf

        echo ${YELLOW}"****************************************"
        echo ${YELLOW}Запуск и проверка корректной работы
        echo ${YELLOW}двух инстансов nginx
        echo ${YELLOW}"****************************************"
        systemctl enable nginx@first
        systemctl start nginx@first
        systemctl enable nginx@second
        systemctl start nginx@second
        systemctl status nginx@second
        echo
        ss -tnulp | grep nginx
        echo
        ps afx | grep nginx

      SHELL
  
    end
  end